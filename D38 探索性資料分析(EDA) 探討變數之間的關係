
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats
import math
import statistics
import seaborn as sns
from IPython.display import display

import pingouin as pg
import researchpy
%matplotlib inline

df_train = pd.read_csv("Titanic_train.csv")
print(df_train.info())

df_train['Survived_cate'] = df_train['Survived']
df_train['Survived_cate'] = df_train['Survived_cate'].astype('object')
print(df_train.info())

# Q1: 透過數值法計算 Age 和 Survived 是否有相關性?

print(df_train['Age'].isnull().any())
print(df_train['Survived_cate'].isnull().any())
Q1_df_train = df_train[['Age', 'Survived_cate']].dropna()


aov = pg.anova(dv = 'Age', between = 'Survived_cate', data = Q1_df_train, detailed = True)
etaSq = aov.SS[0] / (aov.SS[0] + aov.SS[1])
etaSq

def judgment_etaSq(etaSq):
    if etaSq < 0.01:
        qual = 'Negligible'
    elif eteaSq < 0.06:
        qual = 'Small'
    elif etaSq < 0.14:
        qual = 'Medium'
    else:
        qual = 'Large'
    return(qual)
judgment_etaSq(etaSq)

g = sns.catplot(x = 'Survived_cate', y = 'Age', hue = 'Survived_cate', data = Q1_df_train, kind = 'violin')


# Q2:透過數值法計算 Sex 和 Survived 是否有相關性?

print(df_train['Sex'].isnull().any())
contTable = pd.crosstab(df_train['Sex'], df_train['Survived_cate'])
contTable

df = min(contTable.shape[0], contTable.shape[1] - 1)
df

crosstab, res = researchpy.crosstab(df_train['Survived_cate'], df_train['Sex'], test = 'chi-square')
print(res)

def judgment_CramerV(df, V):
    if df == 1:
        if V < 0.10:
            qual = 'neglgible'
        elif V < 0.30:
            qual = 'samll'
        elif V < 0.50:
            qual = 'medium'
        else:
            qual = 'large'
    elif df == 2:
        if V < 0.07:
            qual = 'negligible'
        elif V < 0.21:
            qual = 'small'
        elif V < 0.35:
            qual = 'medium'
        else:
            qual = 'large'
    elif df == 3:
        if V < 0.06:
            qual = 'negligible'
        elif V < 0.17:
            qual = 'small'
        elif V < 0.29:
            qual = 'medium'
        else:
            qual = 'large'
    elif df == 4:
        if V < 0.05:
            qual = 'negligible'
        elif V < 0.15:
            qual = 'small'
        elif V < 0.25:
            qual = 'medium'
        else:
            qual = 'large'
    else:
        if V < 0.05:
            qual = 'negligible'
        elif V < 0.13:
            qual = 'small'
        elif V < 0.22:
            qual = 'medium'
        else:
            qual = 'large'
    return(qual)
judgment_CramerV(df,res.loc[2,'results'])            
            
g = sns.countplot(x = 'Sex', hue = 'Survived_cate', data = df_train) 
        

# Q3: 透過數值法計算 Age 和 Fare 是否有相關性?

print(df_train['Fare'].isnull().any())
Q3_df_train[['Age', 'Fare']].dropna()

corr3, _ = stats.pearsonr(df_train['Age'], df_train['Fare'])
corr3

g = sns.regplot(x = 'Age', y = 'Fare', color = 'g', data = Q3_df_train)
